// Code generated by goa v3.10.2, DO NOT EDIT.
//
// portfolio HTTP client encoders and decoders
//
// Command:
// $ goa gen sp/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	portfolio "sp/gen/portfolio"
	portfolioviews "sp/gen/portfolio/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildPortfolioSummaryRequest instantiates a HTTP request object with method
// and path set to call the "portfolio" service "portfolioSummary" endpoint
func (c *Client) BuildPortfolioSummaryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		account string
	)
	{
		p, ok := v.(*portfolio.PortfolioSummaryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("portfolio", "portfolioSummary", "*portfolio.PortfolioSummaryPayload", v)
		}
		account = p.Account
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PortfolioSummaryPortfolioPath(account)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("portfolio", "portfolioSummary", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePortfolioSummaryResponse returns a decoder for responses returned by
// the portfolio portfolioSummary endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodePortfolioSummaryResponse may return the following errors:
//   - "internal_error" (type *portfolio.InternalError): http.StatusInternalServerError
//   - "not_found" (type *portfolio.NotFound): http.StatusNotFound
//   - error: internal error
func DecodePortfolioSummaryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PortfolioSummaryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("portfolio", "portfolioSummary", err)
			}
			p := NewPortfolioSummaryPortfolioResultOK(&body)
			view := "default"
			vres := &portfolioviews.PortfolioResult{Projected: p, View: view}
			if err = portfolioviews.ValidatePortfolioResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("portfolio", "portfolioSummary", err)
			}
			res := portfolio.NewPortfolioResult(vres)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body PortfolioSummaryInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("portfolio", "portfolioSummary", err)
			}
			err = ValidatePortfolioSummaryInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("portfolio", "portfolioSummary", err)
			}
			return nil, NewPortfolioSummaryInternalError(&body)
		case http.StatusNotFound:
			var (
				body PortfolioSummaryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("portfolio", "portfolioSummary", err)
			}
			err = ValidatePortfolioSummaryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("portfolio", "portfolioSummary", err)
			}
			return nil, NewPortfolioSummaryNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("portfolio", "portfolioSummary", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCurrencyResponseBodyToPortfolioviewsCurrencyView builds a value of
// type *portfolioviews.CurrencyView from a value of type *CurrencyResponseBody.
func unmarshalCurrencyResponseBodyToPortfolioviewsCurrencyView(v *CurrencyResponseBody) *portfolioviews.CurrencyView {
	res := &portfolioviews.CurrencyView{
		Denom:      v.Denom,
		Price:      v.Price,
		Amount:     v.Amount,
		DenomTotal: v.DenomTotal,
	}

	return res
}
