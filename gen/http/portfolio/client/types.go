// Code generated by goa v3.10.2, DO NOT EDIT.
//
// portfolio HTTP client types
//
// Command:
// $ goa gen sp/design

package client

import (
	portfolio "sp/gen/portfolio"
	portfolioviews "sp/gen/portfolio/views"

	goa "goa.design/goa/v3/pkg"
)

// PortfolioSummaryResponseBody is the type of the "portfolio" service
// "portfolioSummary" endpoint HTTP response body.
type PortfolioSummaryResponseBody struct {
	// Account ID
	AccountID *string `form:"AccountID,omitempty" json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// List of currency information
	Portfolio []*CurrencyResponseBody `form:"Portfolio,omitempty" json:"Portfolio,omitempty" xml:"Portfolio,omitempty"`
	// Total value of the portfolio in dollars
	Total *string `form:"Total,omitempty" json:"Total,omitempty" xml:"Total,omitempty"`
	// List of tokens which could not be resolved and did not contribute to the
	// total
	Missing []string `form:"Missing,omitempty" json:"Missing,omitempty" xml:"Missing,omitempty"`
}

// PortfolioSummaryInternalErrorResponseBody is the type of the "portfolio"
// service "portfolioSummary" endpoint HTTP response body for the
// "internal_error" error.
type PortfolioSummaryInternalErrorResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// PortfolioSummaryNotFoundResponseBody is the type of the "portfolio" service
// "portfolioSummary" endpoint HTTP response body for the "not_found" error.
type PortfolioSummaryNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CurrencyResponseBody is used to define fields on response body types.
type CurrencyResponseBody struct {
	// Name of the currency
	Denom *string `form:"Denom,omitempty" json:"Denom,omitempty" xml:"Denom,omitempty"`
	// Price of the currency
	Price *string `form:"Price,omitempty" json:"Price,omitempty" xml:"Price,omitempty"`
	// Amount of the currency in the account
	Amount *string `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Total value of the denomination in the portfolio
	DenomTotal *string `form:"DenomTotal,omitempty" json:"DenomTotal,omitempty" xml:"DenomTotal,omitempty"`
}

// NewPortfolioSummaryPortfolioResultOK builds a "portfolio" service
// "portfolioSummary" endpoint result from a HTTP "OK" response.
func NewPortfolioSummaryPortfolioResultOK(body *PortfolioSummaryResponseBody) *portfolioviews.PortfolioResultView {
	v := &portfolioviews.PortfolioResultView{
		AccountID: body.AccountID,
		Total:     body.Total,
	}
	v.Portfolio = make([]*portfolioviews.CurrencyView, len(body.Portfolio))
	for i, val := range body.Portfolio {
		v.Portfolio[i] = unmarshalCurrencyResponseBodyToPortfolioviewsCurrencyView(val)
	}
	v.Missing = make([]string, len(body.Missing))
	for i, val := range body.Missing {
		v.Missing[i] = val
	}

	return v
}

// NewPortfolioSummaryInternalError builds a portfolio service portfolioSummary
// endpoint internal_error error.
func NewPortfolioSummaryInternalError(body *PortfolioSummaryInternalErrorResponseBody) *portfolio.InternalError {
	v := &portfolio.InternalError{
		Message: *body.Message,
	}

	return v
}

// NewPortfolioSummaryNotFound builds a portfolio service portfolioSummary
// endpoint not_found error.
func NewPortfolioSummaryNotFound(body *PortfolioSummaryNotFoundResponseBody) *portfolio.NotFound {
	v := &portfolio.NotFound{
		Message: *body.Message,
	}

	return v
}

// ValidatePortfolioSummaryInternalErrorResponseBody runs the validations
// defined on portfolioSummary_internal_error_response_body
func ValidatePortfolioSummaryInternalErrorResponseBody(body *PortfolioSummaryInternalErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidatePortfolioSummaryNotFoundResponseBody runs the validations defined on
// portfolioSummary_not_found_response_body
func ValidatePortfolioSummaryNotFoundResponseBody(body *PortfolioSummaryNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCurrencyResponseBody runs the validations defined on
// CurrencyResponseBody
func ValidateCurrencyResponseBody(body *CurrencyResponseBody) (err error) {
	if body.Denom == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Denom", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Price", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.DenomTotal == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("DenomTotal", "body"))
	}
	return
}
