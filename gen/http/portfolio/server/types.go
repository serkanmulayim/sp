// Code generated by goa v3.10.2, DO NOT EDIT.
//
// portfolio HTTP server types
//
// Command:
// $ goa gen sp/design

package server

import (
	portfolio "sp/gen/portfolio"
	portfolioviews "sp/gen/portfolio/views"
)

// PortfolioSummaryResponseBody is the type of the "portfolio" service
// "portfolioSummary" endpoint HTTP response body.
type PortfolioSummaryResponseBody struct {
	// Account ID
	AccountID string `form:"AccountID" json:"AccountID" xml:"AccountID"`
	// List of currency information
	Portfolio []*CurrencyResponseBody `form:"Portfolio" json:"Portfolio" xml:"Portfolio"`
	// Total value of the portfolio in dollars
	Total string `form:"Total" json:"Total" xml:"Total"`
	// List of tokens which could not be resolved and did not contribute to the
	// total
	Missing []string `form:"Missing" json:"Missing" xml:"Missing"`
}

// PortfolioSummaryInternalErrorResponseBody is the type of the "portfolio"
// service "portfolioSummary" endpoint HTTP response body for the
// "internal_error" error.
type PortfolioSummaryInternalErrorResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
}

// PortfolioSummaryNotFoundResponseBody is the type of the "portfolio" service
// "portfolioSummary" endpoint HTTP response body for the "not_found" error.
type PortfolioSummaryNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
}

// CurrencyResponseBody is used to define fields on response body types.
type CurrencyResponseBody struct {
	// Name of the currency
	Denom string `form:"Denom" json:"Denom" xml:"Denom"`
	// Price of the currency
	Price string `form:"Price" json:"Price" xml:"Price"`
	// Amount of the currency in the account
	Amount string `form:"Amount" json:"Amount" xml:"Amount"`
	// Total value of the denomination in the portfolio
	DenomTotal string `form:"DenomTotal" json:"DenomTotal" xml:"DenomTotal"`
}

// NewPortfolioSummaryResponseBody builds the HTTP response body from the
// result of the "portfolioSummary" endpoint of the "portfolio" service.
func NewPortfolioSummaryResponseBody(res *portfolioviews.PortfolioResultView) *PortfolioSummaryResponseBody {
	body := &PortfolioSummaryResponseBody{
		AccountID: *res.AccountID,
		Total:     *res.Total,
	}
	if res.Portfolio != nil {
		body.Portfolio = make([]*CurrencyResponseBody, len(res.Portfolio))
		for i, val := range res.Portfolio {
			body.Portfolio[i] = marshalPortfolioviewsCurrencyViewToCurrencyResponseBody(val)
		}
	}
	if res.Missing != nil {
		body.Missing = make([]string, len(res.Missing))
		for i, val := range res.Missing {
			body.Missing[i] = val
		}
	}
	return body
}

// NewPortfolioSummaryInternalErrorResponseBody builds the HTTP response body
// from the result of the "portfolioSummary" endpoint of the "portfolio"
// service.
func NewPortfolioSummaryInternalErrorResponseBody(res *portfolio.InternalError) *PortfolioSummaryInternalErrorResponseBody {
	body := &PortfolioSummaryInternalErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewPortfolioSummaryNotFoundResponseBody builds the HTTP response body from
// the result of the "portfolioSummary" endpoint of the "portfolio" service.
func NewPortfolioSummaryNotFoundResponseBody(res *portfolio.NotFound) *PortfolioSummaryNotFoundResponseBody {
	body := &PortfolioSummaryNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewPortfolioSummaryPayload builds a portfolio service portfolioSummary
// endpoint payload.
func NewPortfolioSummaryPayload(account string) *portfolio.PortfolioSummaryPayload {
	v := &portfolio.PortfolioSummaryPayload{}
	v.Account = account

	return v
}
